<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>netcoreapp3.1</TargetFramework>
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
    <UserSecretsId>1a20d37a-8320-4319-b444-c17c602d1fca</UserSecretsId>
    <DockerDefaultTargetOS>Windows</DockerDefaultTargetOS>
    <DockerfileContext>.</DockerfileContext>


    <IsPackable>false</IsPackable>
    <SpaRoot>ClientApp\</SpaRoot>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
    <BuildServerSideRenderer>false</BuildServerSideRenderer>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" Version="3.1.6" />
    <PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.10.9" />
  </ItemGroup>

  <ItemGroup>
    <Compile Remove="client\**" />
    <Content Remove="$(SpaRoot)**" />
    <Content Remove="client\**" />
    <EmbeddedResource Remove="client\**" />
    <None Remove="$(SpaRoot)**" />
    <None Remove="client\**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
  </ItemGroup>

  <ItemGroup>
    <None Remove="ClientApp\src\app\core\services\services.SalesService.ts" />
    <None Remove="ClientApp\src\app\core\timePeriod.enum.ts" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="ClientApp\src\app\home\controls\filter\" />
    <Folder Include="ClientApp\src\app\home\pages\" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\TestTaskCAE.Services\TestTaskCAE.Services.csproj" />
  </ItemGroup>

  <ItemGroup>
    <TypeScriptCompile Include="ClientApp\src\app\core\timePeriod.enum.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\core\services\services.salesService.ts" />
  </ItemGroup>

  <ItemGroup>
    <None Update="testdb.mdf">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>

  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
  </Target>

</Project>
